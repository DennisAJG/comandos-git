Comandos do git para desenvolvimento

git --version -> Exibe a versão do git.


1 - Configuração de usuário
OBS: usado para rastreabilidade de quem vem fazendo o versionamento do código no projeto
git config --global user.name "Dennis Augusto" ->
git config --global user.email "dennis.gusmao@outlook.com" ->

git config --global user.name -> valida quem é o user
git config --global user.email -> valida quem é o email do user

git config --list -> listas todas as configurações do git 
git config --global init.defaultBranch main -> Deixa definido como default uma branch informada
git config --global core.editor "code --wait" -> deixa configurado o vscode como editor de texto pro git 


--------------------------------------------------------------------------------------------------------
2 - Criando um repositório local
OBS: usado para inicializar um repositório local
git init -> cria um novo repositório vazio


--------------------------------------------------------------------------------------------------------
3 - Adicionando mudanças:
OBS: usado para adicionar alterações no repositório local
git status -> usado para visualizar os arquivos que estão em Untracked ou not commit
git add -> adiciona todos os arquivos alterados para serem versionados


--------------------------------------------------------------------------------------------------------
4 - Removendo arquivos adicionados:
OBS: usado para remover arquivos adicionados ao repositório local
git rm --cached folder -> remove um arquivo específico do repositório local
git rm --cached -r . -> remove todos os arquivos de forma recursiva


--------------------------------------------------------------------------------------------------------
5 - Salvando mudanças:
OBS: usado para salvar as mudanças no repositório local
git commit -m "mensagem do commit" -> salva as mudanças com uma mensagem


--------------------------------------------------------------------------------------------------------
Quatro estados:
Untracked ->
Unmodified ->
Modified ->
staged ->


--------------------------------------------------------------------------------------------------------
6 - Visualizando alterações:
OBS: usado para ver as mudanças feitas nos arquivos no repositório local
git diff -> exibe as alterações feitas nos arquivos
git diff --cached -> exibe as alterações para arquivo já preparados ou não 
git diff --staged -> exibe as alterações para arquivo já preparados ou não 


--------------------------------------------------------------------------------------------------------
7 - Histórico de commits:
OBS: usado para ver o histórico de commits
git log -> exibe o histórico de commits

VARIAÇÕES DO GIT LOGS:
git log --oneline -> exibe o histórico de commits apenas mostrando o rash e o nome do commit 
git log --graph -> exibe o histórico de commits como um grafico
git log -1 -> exibe apenas um log 
git log --oneline -1 
git log -p -> exibe os logs com o path do commit
git log --stat -> exibe os arquivos alterados do log
git log --shortstat


--------------------------------------------------------------------------------------------------------
8 - Alterando commits:
OBS: usado para voltar para commits anteriores
git commit -amend -m "Altera o nome do commit" -> altera a mensagem do ultimo commit
git commit -amend --no-edit -> envia o arquivo para o commit 


--------------------------------------------------------------------------------------------------------
9 - Usando commits anteriores:
OBS: usado para voltar para commits anteriores
git checkout rash-do-commit -> volta para o commit selecionado
git checkout folder -> reverte o arquivo para a ultima versão
git clean -f -> usado para limpar arquivos não rastreaveis 

git rm --cached file -> usado para remover um arquivo na área de preparação se existir ou não commits no repositório
git restore --staged file -> usado para remover um arquivos se já houver históricos

git reset --hard -> ele vai limpar tudo, mesmo os arquivos estejam no ambiente de preparação ou não. 



--------------------------------------------------------------------------------------------------------
10 - Iginorando arquivos:
OBS: usado para iginorar alguns arquivos que não precisam ser enviados para o repositório

.gitignore -> arquivo usado para ignorar arquivos que não vão para a área de preparação.

git update-index --skip-worktree index.html -> faz com que o git para de olhar para o arquivo index.html


--------------------------------------------------------------------------------------------------------
11 - Clonando o repositório:
git clone gitrepo gitnew -> clona de um repositório local 
git clone https://... -> clone de um repositório remoto


--------------------------------------------------------------------------------------------------------
12 - Endereço de repositório:
git remote -v 
origin https://... (fetch) -> busca informações
origin https://... (push) -> envia informações

git remote add origin https://... -> faz o processo adicionar a pasta ao repositório remoto 
OBS:
o git remote pode ser usado para trabalhar com varios repositório locals
git remote add abc http://.2 

git remote set-url origin https://... -> faz o processo de referencia do repositório locals


--------------------------------------------------------------------------------------------------------
13 - Salvando mudanças no repositório:
git push -> envia o projeto commitado local para o remoto 


--------------------------------------------------------------------------------------------------------
14 - Baixando a última versão do projeto:
git pull -> atualiza o projeto coletando a ultima versão do projeto remoto.


--------------------------------------------------------------------------------------------------------
15 - Fork:
O fork faz o processo de copia de uma repositório remoto. 

OBS: 
Quando o repositório original fizer um update, o repositório fork será notificado, dai você pode atualizar também ou não. 


--------------------------------------------------------------------------------------------------------
16 - Pull request:
É uma proposta de mudança que você fez no projeto. 
Exemplo:
você fez o fork do projeto A, e fez uma mudança no projeto, 
você pode enviar um pull request para o projeto e ver se vai ser aprovado ou não. 


---------------------------------------------------------------------------------------------------------
17 - Issues, milestones, labels:
Conceito de Issues:
Usado para relatar um problema dentro do projeto 

Conceito de Labels:
Usado para categorizar os problemas. 

Conceito de milestones:
Usado para atingir marcos pro problema. 


----------------------------------------------------------------------------------------------------------
Arquivo README:
Usado para documentação do projeto.
Principal link para usar como base o uso do README.md:
https://dillinger.io/

---------------------------------------------------------------------------------------------------------
Branchs:
É uma ramificação no projeto que permite que funcionalidades sejam desenvolvidas separadamente sem 
impactar funcionalidades estáveis no projeto.

Criando uma branch:
git branch -> lista as branchs disponiveis 
git branch --list 
git branch new_branch -> cria uma nova branch
git checkout new_branch -> acessa a nova branch criada
git checkout -b new_branch -> além de criar a nova branch e automaticamente já passa para ela.
git switch old_branch -> faz a troca da branch 
git switch - -> volta para branch anterior após a mudança 
git switch -c new_branch -> cria uma nova branch
git checkout -f branch -> faz o processo de troca de branch limpa (mudanças salvas ou não)


---------------------------------------------------------------------------------------------------------
Detached HEAD:
O conceito de Detached HEAD no Git ocorre quando o ponteiro HEAD não está apontando para uma branch, 
mas sim diretamente para um commit específico. Normalmente, o HEAD aponta para a branch atual em que você está, mas, 
em um estado de "detached HEAD", o HEAD aponta para um commit isolado, 
o que significa que você não está mais trabalhando em uma branch convencional.


----------------------------------------------------------------------------------------------------------
Enviando uma branch para o servidor remoto:
git push --set-upstream origin name_branch -> comando usado para enviar uma branch do repositório local para o remoto caso o mesmo 
não exista. 
git push -u origin name_branch -> comando usado para enviar uma branch do repositório local para o remoto caso o mesmo não exista.


------------------------------------------------------------------------------------------------------------
Removendo uma branch local:
git branch -d name_branch -> deleta uma branch
git branch -D name_branch -> Força a deletação da branch

Removendo uma branch remota:
git push --delete origin name_branch -> deleta uma branch remota (Não remove a local)


-------------------------------------------------------------------------------------------------------------
Renomeando branchs:
git branch -m old_branch new_branch -> altera o nome da branch local 

-------------------------------------------------------------------------------------------------------------
Variação do git log:

git log name_branch --oneline -5 -> consegue ver os logs de uma branch específica 